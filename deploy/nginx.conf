events {
    worker_connections 1024;
}

http {
    server_tokens off;

    upstream django {
        server unix:///socket/kelvin.sock;
    }

    upstream deployment {
        server deployment:9000;
    }

    server {
        listen 443 http2 ssl;
        server_name kelvin.cs.vsb.cz;
        charset     utf-8;

        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;

        # Deny illegal Host headers
        if ($host !~* ^(kelvin\.cs\.vsb\.cz)$) {
            return 444;
        }

        location / {
            uwsgi_pass  django;
            include uwsgi_params;

            gzip                on;
            gzip_min_length     1000;
            gzip_types          text/html;
            gzip_vary           on;
        }

        # Serve static files
        location /static/ {
            autoindex on;
            alias /app/static/;
            include /etc/nginx/mime.types;

            # Try to serve .gz file if it exists
            gzip_static on;
            gzip_vary on;
        }

        # This should be in sync with DATA_UPLOAD_MAX_MEMORY_SIZE from kelvin/settings.py
        client_max_body_size 100M;

        # Deployment Service
        location /deployment/ {
            # Docker DNS
            resolver 127.0.0.11 valid=30s;

            # Set upstream dynamically.
            # We want nginx to work even if the deployment service is not up, so we cannot use a
            # normal upstream { ... } block.
            set $upstream_deployment deployment:9000;
            # Remove the /deployment URL prefix
            rewrite ^/deployment/(.*)$ /$1 break;

            proxy_pass http://deployment/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 600s; # Increase timeout for long-running requests
        }

    }

    # Redirect all HTTP requests to HTTPS
    server {
        listen 80;
        server_name kelvin.cs.vsb.cz;
        return 301 https://$host$request_uri;
    }
}
